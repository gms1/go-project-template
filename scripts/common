#!/bin/bash
SCRIPT_DIRNAME=$(dirname -- "${BASH_SOURCE[0]}")
WORKSPACE_DIR=$(realpath "${SCRIPT_DIRNAME}/..")

#---------------------------------------------------------
err() {
  [ -t 2 ] && echo -n -e "\e[00;31m" >&2
  echo "ERROR: $@" >&2
  [ -t 2 ] && echo -n -e '\e[00m' >&2
}

#---------------------------------------------------------
die() {
  err "$@"
  exit 1
}

#---------------------------------------------------------
errorHandler() {
  local script="$0"
  local line="$1"
  local command="$2"
  local code="$3"
  set +x
  err "${script}: line: ${line}: command \"${command}\" exited with ${code}"
}

#---------------------------------------------------------
setVersion() {
  VERSION=$(awk -F\" '/Version/{print $2}' "${WORKSPACE_DIR}/pkg/common/about.go")
}

#---------------------------------------------------------
setNextVersion() {
  local versionParts=( $(echo ${VERSION//./ } ))
  local nextPatchVersion="${versionParts[2]}"
  nextPatchVersion="$((nextPatchVersion + 1))"
  NEXT_VERSION="${versionParts[0]}.${versionParts[1]}.${nextPatchVersion}"
}

#---------------------------------------------------------
gitMustBeClean() {
  git diff --cached --quiet "$@" &>/dev/null || die "repo $@ is not clean (changes in staging area)"
  git diff --quiet "$@" &>/dev/null || die "repo $@ is not clean (changes not staged)"
}
#---------------------------------------------------------

trap 'errorHandler "$LINENO" "$BASH_COMMAND" "$?"' "ERR"
set -e
set -o pipefail

setVersion
cd "${WORKSPACE_DIR}"
